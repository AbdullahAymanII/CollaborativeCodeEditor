name: Backend CI/CD Pipeline

on:
  push:
    branches:
      - feature-websocket

jobs:
  # Compile job
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Compile Project
        run: mvn clean compile
        working-directory: ./editor

  # Test job
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Run Unit Tests
        run: mvn test -DskipTests=false # Ensure tests run
        working-directory: ./editor


  # Build job (waits for compile and test jobs to complete)
  build:
    runs-on: ubuntu-latest
    needs: [ test, compile ]  # Run after both compile and test are finished
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Build Project
        run: mvn clean package -DskipTests
        working-directory: ./editor

  # Build and Push Docker Image job (waits for build job)
  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: build  # Run after build finishes
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest ./editor

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

  # Deploy job (waits for build-and-push-docker job)
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-docker  # Run after Docker image is pushed
    steps:
      - name: Deploy to AWS EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.AWS_EC2_KEY }} ubuntu@${{ secrets.AWS_EC2_IP }} 'docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest && docker-compose up -d'
